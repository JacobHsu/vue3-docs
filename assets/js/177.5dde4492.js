(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{620:function(t,s,a){"use strict";a.r(s);var e=a(48),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"gof23种设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gof23种设计模式"}},[t._v("#")]),t._v(" GOF23种设计模式")]),t._v(" "),a("p",[t._v("通过vue来了解一下GOF.\nGOF是设计模式的经典名著《设计模式——可复用面向对象软件的基础》，在书本总结了23个设计模式。罗列一下哪些设计模式是我们见过的。")]),t._v(" "),a("h2",{attrs:{id:"单例-singleton-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例-singleton-模式"}},[t._v("#")]),t._v(" 单例（Singleton）模式")]),t._v(" "),a("p",[t._v("定义：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。(创建型)\n例子："),a("code",[t._v("Vuex")]),t._v(" 保证唯一 Store，以及单例组件")]),t._v(" "),a("h2",{attrs:{id:"工厂-factory-method-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂-factory-method-模式"}},[t._v("#")]),t._v(" 工厂（Factory Method）模式")]),t._v(" "),a("p",[t._v("定义：一个用于创建产品的接口，由子类决定生产什么产品。 (创建型)\n例子：将new操作单独封装，遇到"),a("code",[t._v("new")]),t._v("时，就要考虑是否该用工厂模式。 在组件中传入实参，返回出不同的组件**")]),t._v(" "),a("h2",{attrs:{id:"抽象工厂-abstract-factory-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂-abstract-factory-模式"}},[t._v("#")]),t._v(" 抽象工厂（Abstract Factory）模式")]),t._v(" "),a("p",[t._v("定义：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。 (创建型)\n例子：\n比如说有个案例有不同的订单状态对应不同的操作按钮。我们是不是一般会写出如下的代码")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'待付款'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果我们把订单状态的一些判断与业务代码掺杂在一块，不利于我们做扩展和复用。那对比一下下面的代码")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderStatusFactory")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStatusObjWith")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" undifined "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'待付款'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatusWaitToPay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'待发货'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatusWaitToShip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"组合-composite-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合-composite-模式"}},[t._v("#")]),t._v(" 组合（Composite）模式")]),t._v(" "),a("p",[t._v("定义：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。 (结构型)\n例子：组件")]),t._v(" "),a("p",[t._v("组合模式给我们的启示，组件接口设计三原则")]),t._v(" "),a("ol",[a("li",[t._v("保持接口小，props 数量要少")]),t._v(" "),a("li",[t._v("根据数据边界来划分组件，利用组合（composition）")]),t._v(" "),a("li",[t._v("把 state 尽量往上层组件提取")])]),t._v(" "),a("p",[t._v("同时，我们也接触了这样一些最佳实践：")]),t._v(" "),a("ol",[a("li",[t._v("避免 renderXXXX 函数，直接使用独立的纯函数组件")]),t._v(" "),a("li",[t._v("给回调函数类型的 props 加统一前缀，比如 on 或者 handle")]),t._v(" "),a("li",[t._v("使用 propTypes 来定义组件的 props")])]),t._v(" "),a("h2",{attrs:{id:"观察者-observer-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者-observer-模式"}},[t._v("#")]),t._v(" 观察者（Observer）模式")]),t._v(" "),a("p",[t._v("定义：当一个变量值被修改时，可以自动通知所有关注这个变量的其他对象，自动重新更新获取这个变量的新值 (行为型)\n例子：vue的双向监听就是基于观察者模式实现的")])])}),[],!1,null,null,null);s.default=r.exports}}]);